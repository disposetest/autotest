name: Automated tests
variables:
  python.version: '3.7.6'
  PUBLIC_KEY: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQD2DdxPjYlEW96uIweui4EyRDLh6zP52Mu5eLAuWyQlxgzph2Zw9Im/TpVfemw1NZGLQYL5rd+kMALPM7DglLjW/XINJ/GG+XP778SgnDXBtm9FCQP/GIgRuMYTPSEvtHt16WwL1TWIHbcBO17frd5aZ300GUCSviLw4q7i6EhHMcuNlAMTuTfNrwxW48TuH2C+11qItDJZdzHyBhu9ncFweRa7af2NqFLTVNuIQtTRz/7hnuTGXf96o61TYDJY/YSqCWT7oEYCAkjvXfLgJ9Egdy19m3RBs0OGLYk3loRn7WBfUoyN/Uuq8NIwvg+cbouRrnWXBLf0DykfZqMs3IOAnd0NFyftbVxiQtO4lVXTYuIJtKpDL+mHVnPvIjKykXQxPGTYAbsKqU96aLW0AUTWvtfnwstKtOkmuw3QNK/i0HSuAoup/gEgFmxsm24BUcyYRPQxemNmxlQbm9iUQUIX8fLdaBI+AGTeBUyuRepyhOR/l8ssFU2rexFAfTvKXiFzbu/dZ0dBBLFKPSH7nsSgHQsovx/gWxqfzVllFyS945cWKNWa0wjmLFO0zQx5mOly82KXKJXIxo6VSbTsc7sKbSbYwApETCNT0edi8kgSVjj4p5H1uiUn6EcBBVMX6ELadIh4y3AgZ6bYm/jNtdnV4pJ00PrxGJ21x5uokziC7w== cjordan@cjordan-Aspire-VX5-591G'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Need for Terraform VM deployment
     - task: InstallSSHKey@0
       inputs:
        knownHostsEntry: "|1|ygTyu2u0HX8v129KIPlJo9AwenY=|haFgF662qkXP0kc4DQoPS3teU5Y= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=="
        sshPublicKey: $(PUBLIC_KEY)
        sshKeySecureFile: id_rsa.pub


       #login to azure account
 #    - script: 'az login --service-principal -u 26b6e71c-5dea-4977-969f-a9837ef76432 -p yg6Z1WGQ08Uqvk8-_Qa1gMXxWTlv-LxZKX --tenant 2cfcb216-ce47-4699-a281-2f1ee48e20f7'
  #     displayName: login to azure
   #    workingDirectory:  ./terraform
    #  #set resources on azure
     #- script: 'terraform init'
#       displayName: Initialise Azure Resources
 #      workingDirectory:  ./terraform
  #    #create azure resources
   #  - script: 'terraform apply -auto-approve -lock=false'
    #   displayName: Create Azure Resources
     #  workingDirectory:  ./terraform

    
     - task: ArchiveFiles@2
       displayName: Archive FakeRestAPI
       inputs:
        rootFolderOrFile: './automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
       displayName: 'Upload FakeRestApi Package'
       artifact: drop-fakerestapi

      
     - task: 'PublishPipelineArtifact@1'
       inputs:
         targetPath: '$(System.DefaultWorkingDirectory)/automatedtesting'
         artifact: 'tests'
         publishLocation: 'pipeline'
       displayName: 'Upload Testing Folder'

     #install newman runer
     - script: |
          sudo npm install -g newman
          sudo npm install -g newman-reporter-junitfull
          echo 'The bun dir is: $(Build.BinariesDirectory)'
          ls
       displayName: 'Install Newman Runner'
       workingDirectory: $(System.DefaultWorkingDirectory)

     #run test suits for postman
     - script: 'newman run regression.postman_collection.json -e TestSuitEnv.postman_environment.json --reporters junitfull --reporter-junitfull-export Report-dataR.xml'
       displayName: 'Run postman regression test'
       continueOnError: true
       workingDirectory: ./automatedtesting/postman/

     - script: 'newman run validation.postman_collection.json -e TestSuitEnv.postman_environment.json --reporters junitfull --reporter-junitfull-export Report-dataV.xml' 
       displayName: 'Run postman validation test'
       continueOnError: true
       workingDirectory: ./automatedtesting/postman/

     - task: PublishTestResults@2
       displayName: 'Publish Test Results'
       inputs:
           testResultsFormat: 'JUnit'
           testResultsFiles: 'Report-*.xml'
           searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
           mergeTestResults: true
           testRunTitle: 'Test Results Export'
           buildPlatform: 'postman'



- stage:
  displayName: Deployments
  jobs:
   - deployment: FakeRestAPI
     pool:
      vmImage: 'Ubuntu-16.04'
     environment:
       name:  'linuxVMEnv'
       resourceType: VirtualMachine
       tags: web
     strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Free Trial(520b1771-2700-4340-89c6-560a52f65ee9)'
              appName: 'nanolinuxvmproject00-appservice'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
          
              
   - deployment: VMDeploy
     displayName: Deploy the Virtual machine
     environment:
      name:  'linuxVMEnv'
      resourceType: VirtualMachine
      tags: web
     strategy:
       runOnce:
         deploy:
           steps:
           - task: Bash@3
             inputs:
               targetType: 'inline'
               script: |
                 #! /bin/bash 
                 sudo apt-get update
                 sudo apt-get upgrade -y
                 sudo apt-get install python3-pip -y
                 sudo apt-get install unzip -y
                 sudo apt-get install -y chromium-browser
                 pip3 install --upgrade pip
                 pip3 install -U selenium
                 chmod +777 $(System.DefaultWorkingDirectory)/automatedtesting/selenium/chromedriver
                 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                 sudo dpkg --install google-chrome-stable_current_amd64.deb
                 sudo apt install -y --fix-broken
                 sudo apt-get update -y --fix-missing
                 sudo apt-get install -y -f
                 sudo apt-get autoremove -y
                 
                 export PATH=$PATH:'$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
                 sudo cp $(System.DefaultWorkingDirectory)/automatedtesting/selenium/chromedriver Build.BinariesDirectory
           - task: 'DownloadPipelineArtifact@2'
             displayName: 'Download test folder'
             inputs:
              artifact: 'tests'
              path: $(System.DefaultWorkingDirectory)/automatedtesting      

          #Run Selenium test
           - script: |
                sudo cp $(System.DefaultWorkingDirectory)/automatedtesting/selenium/chromedriver -f /usr/bin
                python3 $(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py | tee -a $(System.DefaultWorkingDirectory)/automatedtesting/selenium/logs.txt
             displayName: 'Run selenium test suit'
             continueOnError: true


                 
- stage: PerformanceTestStage
  displayName: Performance Test
  jobs:
    - job: 
      pool:
        vmImage: 'Ubuntu-16.04'
      steps: 
        - script: |
            sudo apt-get install unzip -y
            wget https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.3.zip
            unzip apache-jmeter-5.3.zip
            cd apache-jmeter-5.3/bin
            sudo ln -r -s jmeter /usr/bin
          displayName:  Jmeter Installation

        - script: |
            jmeter -n -t Endurance_Test.jmx -l results.csv -e -f -o $(System.DefaultWorkingDirectory)/automatedtesting/jmeter/report/endur
            jmeter -n -t Stress_Test.jmx -l results.csv -e -f -o $(System.DefaultWorkingDirectory)/automatedtesting/jmeter/report/stress
          displayName: Perfomance Tests
          workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/jmeter


          

           

           